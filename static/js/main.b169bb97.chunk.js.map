{"version":3,"sources":["App.js","index.js"],"names":["drivers","App","useState","inputValue","setInputValue","randomDriver","setRandomDriver","showRandomizedGroup","setShowRandomizedGroup","onSubmit","e","preventDefault","search","split","forEach","driver","push","type","value","onChange","target","disabled","length","map","onClick","filteredDrivers","filter","Math","floor","random","sort","person","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAEMA,EAAU,GA0EDC,MAxEf,WACE,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAsDJ,oBAAS,GAA/D,mBAAOK,EAAP,KAA4BC,EAA5B,KAqBA,OACE,qCACA,iCACE,mDAEA,oCACE,6DACA,iEACA,uBAAMC,SA3BS,SAACC,GACpBA,EAAEC,kBAE8B,IAA5BR,EAAWS,OAAO,KACpBT,EAAWU,MAAM,KAAKC,SAAQ,SAAAC,GAC5Bf,EAAQgB,KAAKD,MAGff,EAAQgB,KAAKb,GAGfC,EAAc,KAgBV,UACE,0CAEE,uBAAOa,KAAK,OAAOC,MAAOf,EAAYgB,SAAU,SAACT,GAAD,OAAON,EAAcM,EAAEU,OAAOF,aAEhF,uBAAOD,KAAK,SAASC,MAAM,YAAYG,UAAWlB,UAGrDH,EAAQsB,OAAS,GAClB,oCACE,mDACA,6BACGtB,EAAQuB,KAAI,SAAAR,GAAM,OAAI,6BAAkBA,GAATA,QAElC,wBACES,QA5B0B,WAChC,IAAMC,EAAmBzB,EAAQ0B,QAAO,SAAAX,GAAM,OAAIA,IAAWV,KAC7DC,EAAgBmB,EAAgBE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAgBH,WAyBvE,SAGIjB,EAAiC,uBAAlB,kBAEnB,+BAAO,SACP,wBAAQmB,QAAS,kBAAMhB,GAAuB,IAA9C,0CAEDH,GACC,oCACE,mDACA,6BAAKA,OAGRE,GACC,oCACE,+DACA,6BACG,UAAIP,GAAS8B,MAAK,kBAAMH,KAAKE,SAAW,MAAKN,KAAI,SAAAQ,GAAM,OAAI,6BAAkBA,GAATA,eChEjFC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b169bb97.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst drivers = [];\n\nfunction App() {\n  const [inputValue, setInputValue] = useState('');\n  const [randomDriver, setRandomDriver] = useState(null);\n  const [showRandomizedGroup, setShowRandomizedGroup] = useState(false);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (inputValue.search(',') !== -1) {\n      inputValue.split(',').forEach(driver => {\n        drivers.push(driver);\n      });\n    } else {\n      drivers.push(inputValue);\n    }\n\n    setInputValue('');\n  }\n\n  const handleRandomDriverRequest = () => {\n    const filteredDrivers  = drivers.filter(driver => driver !== randomDriver);\n    setRandomDriver(filteredDrivers[Math.floor(Math.random() * filteredDrivers.length)])\n  }\n\n  return (\n    <>\n    <header>\n      <h1>Giraffe Drivers</h1>\n    </header>\n      <section>\n        <h2>Enter the potential drivers</h2>\n        <p>One at a time or comma separated</p>\n        <form onSubmit={handleSubmit}>\n          <label>\n            Name:\n            <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} />\n          </label>\n          <input type=\"submit\" value=\"Add them!\" disabled={!inputValue} />\n        </form>\n      </section>\n      {drivers.length > 0 && \n      <section>\n        <h2>Potential Drivers</h2>\n        <ol>\n          {drivers.map(driver => <li key={driver}>{driver}</li>)}\n        </ol>\n        <button \n          onClick={handleRandomDriverRequest}\n        >\n          {!randomDriver ? 'Get a Driver!' : 'Get a different one?'}\n        </button>\n        <span>{' or '}</span>\n        <button onClick={() => setShowRandomizedGroup(true)}>Randomize the whole group</button>\n      </section>}\n      {randomDriver && \n        <section>\n          <h2>The new driver is</h2>\n          <h3>{randomDriver}</h3>\n        </section>\n      }\n      {showRandomizedGroup && \n        <section>\n          <h2>Let's go in this order today!</h2>\n          <ol>\n            {[...drivers].sort(() => Math.random() - 0.5).map(person => <li key={person}>{person}</li>)}\n          </ol>\n        </section>\n      }\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}